* procure
** list all image instances of a service
docker image ls --quiet --filter "reference=dquack/<repository>/<service>"
docker images --quiet --filter "reference=dquack/<repository>/<service>"

** error cases
*** trying to remove an image while it is being referenced by containers
GET :
http://localhost:8080/service/bratnet%2Fmssql:2019?user=pavlos&app=app_name
Error response from daemon: conflict: unable to remove repository reference
"bratnet/mssql:2019" (must force) - container a7b84bdb7150 is using its
referenced image 46946236b211

Occurs when:
Image wants to build a new image because the referenced asset has
been modified since the image was last built but it cannot because thhe stale
image is referenced by running containers.

**** Solution #1
on each procurement request try and remove all image instances of the requested
service. those that have not been removed are being referenced by running
containers. build a new image where the tag is the Nth instance. The Nth
instance = Ninstances + 1

Which leads to a naming problem. The Nth + 1 instance may not be given a name
equal to the length of instances because that number may already be taken.

**** Solution #2
Instead of acting in a sweeping manner like solution #1 behave
in a much more controlled way.

check if the image exists.
If Not build it; no removal of any previous instances required.
If it does exist; check if it is stale.
If it is not stale then return that instance; no need to build any new
If it is stale create Nth instance and try and remove previous ones.
* start
* stop
* container running mssql in windows 10 through wsl2
standard mssql *host* port: 1433
standard mssql *container* port: 1433
docker run usage: docker run [OPTIONS] IMAGE [COMMAND] [ARG...]

The service within the docker container also exposes port 1433

ENV MSSQL_SA_PASSWORD="Pavlos1993"
** connect to the container
docker exec -it <container name|ID> /bin/bash
** check databases
select name
from sys.databases;
GO
** using sqlcmd to connect to the container from any host
sqlcmd -S localhost,51433 -U sa -P Pavlos1993

the server string may be of the form:
host[\instance][,port]

the host is either:
an ip address
a host name

** options
--attach t
--detach d
--interactive i
--publish p
--publish-all P
** container config #1
*** behavior
run container in the foreground
attaches stdin to the containers std*
maps ports
run sql server
*** command
docker run \
--publish 51433:1433 \
--attach stdin \
--interactive \
bratnet/mssql:2019
** contaienr config #2
*** behavior
runs container in the background
map ports
run sql server
*** command
docker run \
--detach
--publish 51433:1433 \
bratnet/mssql:2019

* Service
** Selecting a service
One may list the service through the url:
get:dquack/service
get:dquack/service/

The services returned will be of the form:
<service.name>/<service.tag>

* Assets
** What is an asset
Dquack abstracts Dockerfiles into Assets. An Asset is a Dockerfile that has
passed validation tests and hence forth may be treated as such. A Service may
only be procured if it is based on a valid Asset.

** layout of a conformant Dockerfile
A Dockerfile that is pushed into dquack must conform to these 3 rules to qualify
into an asset.

1. An asset must not be derived from another asset.
2. The following metadata must be present at the dockerfile
   service.author=""
   service.name=""
   service.tag=""
3. It must successfully build.
  
Preferably one may use dquack to provide a Dockerfile template.
*** service.author
https://systemd.io/USER_NAMES/ -> strict mode
^[a-zA-Z_][a-zA-Z0-9_-]{0,30}$
The current user's registered login name.
*** service.name
PROGRAM_NAME/VERSION[_ARCH]
^[a-z](?:(?:\/[a-z])?(?:[-_.]{0,2}[a-z0-9])*)*$
LENGTH: 233

Must conform to the docker image name standards. It would be beneficial to the
user to have the name mean the program's name that the service will run followed
by the version of the program and possibly architecture. However there is no way
to verify semantic conformity.
*** service.tag
^\w[-.\w]{0,126}[a-zA-Z0-9]$

The tag should uniquely identify the version of the asset not the program being
run by the service.
*** OPTIONAL metadata
service.upstream.service="the upstream service" 
service.upstream.repository="the domain of the upstream image"
service.upstream.version="version if any" 
service.upstream.arch="architecture of the upstream version"
service.upstream.tag="upstream tag"
** Pushing a dockerfile into dquack
This is done through a client.

If the dockerfile fails to conform to the standards it will be rejected.
*** DONE client may upload new assets
CLOSED: [2022-09-25 Sun 17:02]

*** DONE server can successfully receive a dockerfile either as a file or content
CLOSED: [2022-09-25 Sun 17:01]

*** TODO Server performs validations
*** TODO Server understands how to append to an already created dockerfile
** Naming convention
An asset's name is derived from metadata found within an uploaded Dockerfile.
<service.author>.<service.name>.<service.tag>.Dockerfile
(part.part.part.Dockerfile)

If it does not then the asset shall be rejected.

If the constituent parts of a name contain any special character
other than a [ _, - ] they will be replaced by an underscore [ _ ].

Given the following metadata found within an asset:

service.author="master"
service.name="mssql_server/2019"
service.tag="0.1"

One should produce the following filename:

master.mssql_server-201$.01.Dockerfile

*** <service.name>
The service.name should uniquely identify the service being provided including
version and possibly architecture.

name/version[_arch]

** Mapping a user requested service to an asset
A user requests a service through a service name.
A user may request to to list the available assets through the url:
get:dquack/service
get:dquack/service/

Each asset will be listed in the response after naming transformation has taken
place.

Each asset name is mapped by applying the following procedure:

extract the ${service.name}
extract the ${service.tag}
join them together using [ : ] (colon).

For example the asset:
mssql.2019-latest.Dockerfile
will be mapped to:
mssql:2019-latest

So that a user may reference an asset:
mssql.2019-latest.Dockerfile
by requesting:
mssql:2019-latest
 
** pushing assets to dquack
** pulling assets from dquack
** listing assets
* Images
* User stories
** User requests a service x

* glossary
** Asset
A Dockerfile from which image instances are based.
** Image instance
Multiple images that reference the same dockerfile but different versions of it
are *instances* of the same dockerfile.
** Stale image
An instance of an image that references a dockerfile version that has been
superseded by a newer one.
